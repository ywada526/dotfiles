# shellcheck disable=SC2148

alias d="docker"
alias dc="docker compose"
alias kk="k9s"
alias gho="gh repo view -w"
alias ggf="ggfl" # https://github.com/ohmyzsh/ohmyzsh/blob/97134d1eed19b72a9c4bf90a2effa847221608bf/plugins/git/git.plugin.zsh#L150-L158
alias tree='tree -I "node_modules" -Ca'
alias gibo="docker run --rm simonwhitaker/gibo"
alias act='act --container-architecture linux/amd64'
alias repos="ghq list --full-path | c"
pr() {
  if [ -n "$1" ]; then gh pr view -w "$1"
  else gh pr view -w "$(git symbolic-ref --short HEAD)"
  fi
}
pri() {
  pr="$(gh pr list | fzf)"
  gh pr view -w "${pr%%	*}"
}
gwa() {
  # Git Worktree Add helper
  # Usage: gwa <branch-name>
  if [ -z "$1" ]; then
    echo "Usage: gwa <branch-name>" >&2
    return 1
  fi

  local branch="$1"

  # Ensure we are inside a git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: not inside a Git repository" >&2
    return 1
  fi

  # Fetch latest refs from origin
  git fetch || return $?

  # Determine the default branch on origin (e.g. origin/main)
  local default_branch
  default_branch="$(git symbolic-ref refs/remotes/origin/HEAD --short)" || {
    echo "Error: could not determine default branch" >&2
    return 1
  }

  # Compute destination directory: parentDir/<repoName>-<branch>
  local repo_root parent_dir repo_name dest_dir safe_branch
  repo_root="$(git rev-parse --show-toplevel)" || return 1
  parent_dir="$(dirname "$repo_root")"
  repo_name="$(basename "$repo_root")"
  safe_branch="${branch//\//-}"
  dest_dir="${parent_dir}/${repo_name}-${safe_branch}"

  # Run git worktree add with new branch based on the default branch
  git worktree add -b "$branch" "$dest_dir" "$default_branch"
}
gwc() {
  cd "$(_fzf_git_worktrees --no-multi)" || exit
}
git_cleanup_worktrees() {
  echo "Removing all Git worktrees in $(pwd)..."
  for d in $(git worktree list --porcelain | awk '/worktree / {print $2}'); do
    if [ "$d" = "$(git rev-parse --show-toplevel)" ]; then
      continue
    fi
    echo "Removing worktree: $d"
    git -C "$d" fsmonitor--daemon stop 2>/dev/null || true
    git worktree remove --force "$d" 2>/dev/null || rm -rf "$d"
  done
  git worktree prune --expire=now -v
  echo "Done"
}
